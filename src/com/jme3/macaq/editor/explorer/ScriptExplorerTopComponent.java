/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jme3.macaq.editor.explorer;

import java.beans.PropertyVetoException;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.jme3.macaq.editor.explorer//ScriptExplorer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ScriptExplorerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "com.jme3.macaq.editor.explorer.ScriptExplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ScriptExplorerAction",
        preferredID = "ScriptExplorerTopComponent"
)
@Messages({
    "CTL_ScriptExplorerAction=ScriptExplorer",
    "CTL_ScriptExplorerTopComponent=ScriptExplorer Window",
    "HINT_ScriptExplorerTopComponent=This is a ScriptExplorer window"
})
public final class ScriptExplorerTopComponent extends TopComponent implements ExplorerManager.Provider{

    private static final String PREFERRED_ID = "ScriptExplorerTopComponent";
    private static ScriptExplorerTopComponent instance;
    private transient ExplorerManager explorerManager = new ExplorerManager();
    
    public ScriptExplorerTopComponent() {
        initComponents();
        setName(PREFERRED_ID);
        setToolTipText("");
        associateLookup(ExplorerUtils.createLookup(explorerManager, getActionMap()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        explorerScrollPane = new BeanTreeView();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(explorerScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(explorerScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane explorerScrollPane;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        AbstractNode node = new AbstractNode(Children.LEAF);
        node.setName("skdjhsj");
        node.setDisplayName("djksdj");
        node.setValue("sdij", new String("sdfdf"));
        
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public static synchronized ScriptExplorerTopComponent getDefault() {
        if (instance == null) {
            instance = new ScriptExplorerTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the SceneExplorerTopComponent instance. Never call
     * {@link #getDefault} directly!
     */
    public static synchronized ScriptExplorerTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            return getDefault();
        }
        if (win instanceof ScriptExplorerTopComponent) {
            return (ScriptExplorerTopComponent) win;
        }
        return getDefault();
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    public void setSelectedNode(AbstractNode node) {
        try {
            if (node != null) {
                explorerManager.setSelectedNodes(new Node[]{node});
//                setActivatedNodes(new Node[]{node});
            } else {
                explorerManager.setSelectedNodes(new Node[]{});
//                setActivatedNodes(new Node[]{});
            }
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    public void setTopNode(Node node){
        if (node != null) {
            explorerManager.setRootContext(node);
            explorerManager.getRootContext().setDisplayName(node.getName());
            setActivatedNodes(new Node[]{node});
            requestVisible();
            try {
                explorerManager.setSelectedNodes(new Node[]{node});
            } catch (PropertyVetoException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }

}
